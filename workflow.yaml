main:
    params: [input]
    steps:
    - start:
        call: sys.log
        args:
            text: ${input}
    - vars:
        assign:
            - report_id: ${input.reportId}
            - bucket_input: "gs://smart-expenses-incoming-receipts/"
            - bucket_output: "gs://smart-expenses-parsed-receipts/"
    - update_status_to_submitted:
        call: update_firestore
        args:
            report_id: ${report_id}
            field: "status"
            value: "SUBMITTED"
            
    - invoke_document_ai:
        call: http.post
        args:
            url: https://eu-documentai.googleapis.com/v1/projects/770605692057/locations/eu/processors/c799b15b13e7c838:batchProcess
            auth:
                type: OAuth2
            body:
                inputDocuments:
                    gcsPrefix:
                        gcsUriPrefix: ${bucket_input + report_id}
                documentOutputConfig:
                    gcsOutputConfig: 
                        gcsUri: ${bucket_output + report_id}
                skipHumanReview: true
        result: document_ai_response
    - update_status_to_processing:
        call: update_firestore
        args:
            report_id: ${report_id}
            field: "status"
            value: "PROCESSING"
    - get_operation_name:
        assign:
            - operation_name: ${document_ai_response.body.name}
    - log_operation_name:
        call: sys.log
        args:
            text: ${"Operation name = " + operation_name}
    - call_lro_watcher:
        call: http.get
        args:
            url: ${"https://eu-documentai.googleapis.com/v1/" + operation_name}
            auth:
                type: OAuth2
        result: document_ai_response
    - log_new_lro_update:
        call: sys.log
        args:
            text: ${document_ai_response.body}        
    - check_lro_status:
        switch:
            - condition: ${"done" in document_ai_response.body and document_ai_response.body.done == True}
              next: check_error_or_response
        next: wait_a_bit
    - wait_a_bit:
        call: sys.sleep
        args:
            seconds: 10
        next: call_lro_watcher

    - check_error_or_response:
        switch:
            - condition: ${"error" in document_ai_response.body}
              next: on_error
        next: create_callback
    - on_error:
        call: update_firestore
        args:
            report_id: ${report_id}
            field: "status"
            value: "ERROR"
    - return_error:
        return: ${document_ai_response.body.error}
    - update_status_to_processed:
        call: update_firestore
        args:
            report_id: ${report_id}
            field: "status"
            value: "PROCESSED"

    - create_callback:
        call: events.create_callback_endpoint
        args:
            http_callback_method: "POST"
        result: callback_details
    - log_callback_details:
        call: sys.log
        args:
            text: ${callback_details}

    - store_callback_details:
        call: update_firestore
        args:
            report_id: ${report_id}
            field: "callback"
            value: ${callback_details.url}
    - update_status_to_awaiting_approval:
        call: update_firestore
        args:
            report_id: ${report_id}
            field: "status"
            value: "AWAITING"
    - await_callback:
        call: events.await_callback
        args:
            callback: ${callback_details}
            timeout: 3600
        result: callback_request
    - assign_approval:
        assign:
            - approved: ${callback_request.http_request.body.approved}
    
    - store_approval:
        switch:
            - condition: ${callback_request.http_request.body.approved}
              steps:
                    - store_approved:
                        call: update_firestore
                        args:
                            report_id: ${report_id}
                            field: "status"
                            value: "APPROVED"
            - condition: ${not callback_request.http_request.body.approved}
              steps:
                    - store_rejected:
                        call: update_firestore
                        args:
                            report_id: ${report_id}
                            field: "status"
                            value: "REJECTED"
    - return_final_step:
        return: ${document_ai_response.body.metadata}

update_firestore:
    params: [report_id, field, value, type: "string"]
    steps:
        - define_db_root:
            assign:
                - database_root: ${"projects/" + sys.get_env("GOOGLE_CLOUD_PROJECT_ID") + "/databases/(default)/documents/requests/"}
                - firestoreType: ${type + "Value"}
                - fieldTypeAndValue: {}
                - fieldTypeAndValue[firestoreType]: ${value}
                - body: {fields: {}}
                - body.fields[field]: ${fieldTypeAndValue}
        - log_firestore_change_request:
            call: sys.log
            args:
                text: ${report_id + " > " + field + " = " + value + " (" + type + ")"}
        - patch_doc_firestore:
            call: googleapis.firestore.v1.projects.databases.documents.patch
            args:
                name: ${database_root + report_id}
                updateMask:
                    fieldPaths: [${field}]
                body: ${body}
            result: firestore_update_result
        - log_firestore_change_response:
            call: sys.log
            args:
                text: ${firestore_update_result}