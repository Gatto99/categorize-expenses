main:
    params: [input]
    steps:
    - start:
        call: sys.log
        args:
            text: ${input}
    - vars:
        assign:
            - report_id: ${input.reportId}
            - bucket_input: "gs://smart-expenses-incoming-receipts/"
            - bucket_output: "gs://smart-expenses-parsed-receipts/"
    - update_status_to_submitted:
        call: update_status
        args:
            report_id: ${report_id}
            status: "SUBMITTED"
            
    - invoke_document_ai:
        call: http.post
        args:
            url: https://eu-documentai.googleapis.com/v1/projects/770605692057/locations/eu/processors/c799b15b13e7c838:batchProcess
            auth:
                type: OAuth2
            body:
                inputDocuments:
                    gcsPrefix:
                        gcsUriPrefix: ${bucket_input + report_id}
                documentOutputConfig:
                    gcsOutputConfig: 
                        gcsUri: ${bucket_output + report_id}
                skipHumanReview: true
        result: document_ai_response
    - update_status_to_processing:
        call: update_status
        args:
            report_id: ${report_id}
            status: "PROCESSING"
    - get_operation_name:
        assign:
            - operation_name: ${document_ai_response.body.name}
    - log_operation_name:
        call: sys.log
        args:
            text: ${"Operation name = " + operation_name}
    - call_lro_watcher:
        call: http.get
        args:
            url: ${"https://eu-documentai.googleapis.com/v1/" + operation_name}
            auth:
                type: OAuth2
        result: lro_update
    - log_new_lro_update:
        call: sys.log
        args:
            text: ${lro_update.body}        
    - check_lro_status:
        switch:
            - condition: ${"done" in lro_update.body and lro_update.body.done == True}
              next: check_error_or_response
        next: wait_a_bit
    - wait_a_bit:
        call: sys.sleep
        args:
            seconds: 10
        next: call_lro_watcher

    - check_error_or_response:
        switch:
            - condition: ${"error" in lro_update.body}
              next: on_error
        next: final_step
    - on_error:
        call: update_status
        args:
            report_id: ${report_id}
            status: "ERROR"
    - return_error:
        return: ${lro_update.body.error}
    - final_step:
        call: update_status
        args:
            report_id: ${report_id}
            status: "FINISHED"
    - return_final_step:
        return: ${lro_update.body.metadata}

update_status:
    params: [report_id, status]
    steps:
        - define_db_root:
            assign:
                - database_root: ${"projects/" + sys.get_env("GOOGLE_CLOUD_PROJECT_ID") + "/databases/(default)/documents/requests/"}
        - patch_doc_firestore:
            call: googleapis.firestore.v1.projects.databases.documents.patch
            args:
                name: ${database_root + report_id}
                updateMask:
                    fieldPaths: ['status']
                body:
                    fields:
                        status:
                            stringValue: ${status}
            result: status_update_result
        - log_result:
            call: sys.log
            args:
                text: ${report_id + " updated to status " + status}    
    